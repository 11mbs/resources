---
title: "Metrics"
date: "`r paste('Last Update:', Sys.Date())`"
output: 
  document: rmarkdown::github_document
  toc: true

---

We use [plausible.io](plausible.io) for our analytics. This is an Open Source system that respect users privacy (does not use cookies and is GDPR compliant).

Our website stats publicly available at plausible.io, you can check them [here](https://plausible.io/open-neuroscience.com?period=12mo).

Being user-driven means we have to pay close attention at how our audience interacts with our content. This includes the website, our [Twitter account](twitter.com/openneurosci) `r fontawesome::fa("twitter", fill = "steelblue")`, and our [YouTube Channel](https://www.youtube.com/channel/UCHPvi_HaEU7OQgXQBh9ECvQ) `r fontawesome::fa("youtube", fill = "steelblue")`, where we host video content such us our Seminar Series Streaming.

### Website Analytics

```{r setup, echo=F}
knitr::opts_chunk$set(echo=FALSE, message = F, warning=F)
```


```{r, eval=F, results="hide", message=FALSE, warning=F}
# Run manually or change to eval=T
source("API_query_visitors.R")
# this will get several denial of services
# so we might need to run it multiple times
#query_plausible()
```

```{r load-fonts, message=F, warning=F}
library(showtext)
library(extrafont)
library(tidyverse)
font_dir <- file.path(dirname(getwd()), "fonts", "MuseoModerno")
fontfiles <- list.files(font_dir, pattern = "ttf", full.names = T)
font_add("MuseoModerno", fontfiles)
#extrafont::font_import(font_dir, prompt = F)
showtext_opts(dpi = 300)
showtext_auto(enable = TRUE)
theme_set(theme(plot.title = element_text(size=16,
                                  family="MuseoModerno"),
                plot.subtitle = element_text(size=12, family="MuseoModerno"))
)
```

```{r theme-nothing}

theme_nothing <-   
  # theme nothing
  #ggthemes::theme_clean() +
  theme(axis.line=element_blank(),
        axis.text.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks=element_blank(),
        axis.title.x=element_blank(),
        axis.title.y=element_blank(),
        legend.position="bottom",
        legend.box.background = element_rect(colour = NA),
        legend.background = element_rect(colour = NA),
        legend.title = element_text(face="plain"),
        panel.background=element_blank(),
        panel.border=element_blank(),
        panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        plot.background=element_blank()
        #text = element_text(family="sans")
        )

theme_clean <-
  theme(axis.line.x = element_line(colour = "black", size = 0.5, 
        linetype = "solid"),
        axis.line.y = element_line(colour = "black", 
            size = 0.5, linetype = "solid"),
        panel.grid.minor = element_blank(), 
        panel.grid.major.y = element_line(colour = "gray", 
            linetype = "dotted"), 
        panel.grid.major.x = element_blank(), 
        panel.background = element_blank(), 
        panel.border = element_blank(), 
        strip.background = element_rect(linetype = 0),
        strip.text = element_text(), 
        strip.text.x = element_text(vjust = 0.5), 
        strip.text.y = element_text(angle = -90), 
        legend.position = "right", 
        legend.key = element_rect(fill = "white", colour = NA), 
        #legend.background = element_rect(colour = "black"), 
        #plot.background = element_rect(colour = "black"), 
        plot.title = element_text(face = "bold"))


```

```{r logo-for-plots}
logo_raw <- magick::image_read("openneuro.jpeg")

# Scale down the logo and give it a border and annotation
# This is the cool part because you can do a lot to the image/logo before adding it
logo <- logo_raw %>%
  magick::image_scale("100") %>% 
  magick::image_background("grey", flatten = TRUE) %>%
  magick::image_border("grey", "600x10") %>%
  magick::image_annotate("Powered By R", 
                         color = "white", 
                         size = 30, 
                         location = "+10+50",
                         gravity = "northeast")
```



```{r, message=F, warning=F}
# Takes a while because we have many many many files
country_files <- list.files("website/plausible/country_data/",
                             pattern = ".json",
                             full.names = T)
source("read_country_json.R")
# this will also generate its file list
website <- read_country_json()
```


```{r remove-duplicates}
# first day of the month is duplicated for some reason
# also, last month will only have 1 value
website <- website %>% 
  distinct() %>% 
  filter(lubridate::month(date) < last(lubridate::month(date)))
```


```{r, eval=F}
website %>% 
  ggplot(aes(date, country_code, fill=log10(visitors + 1))) +
  geom_tile() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "bottom")+
  labs(
    title = "Daily visits to openneuroscience",
    subtitle = "Each row is a country",
    y="",
    x="")+
  scale_fill_viridis_c()+
  scale_x_date(breaks="2 months", date_labels = "%B\n%Y")
  
```


```{r, eval=F}
website %>% 
  group_by(country_code, 
           date = as.factor(zoo::as.yearmon(date))) %>% 
  summarise(visitors = sum(visitors)) %>% 
  ggplot(aes(date, country_code, fill=log10(visitors + 1))) +
  geom_tile() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "bottom")+
  labs(
    title= "Monthly visits to openneuroscience",
    subtitle = "Each row is a country",
    y="", x="")+
  scale_fill_viridis_c()+
  #coord_equal()+
  #scale_x_date(breaks="1 months", date_labels = "%B\n%Y")
  NULL
```


```{r top-visits}
monthly_data <-
website %>%
  group_by(country_code, date=factor(zoo::as.yearmon(date)))%>% 
  summarise(visitors = sum(visitors)) %>% 
  ungroup() 

top_countries <- monthly_data %>% 
    group_by(date) %>% 
  slice_max(visitors, n = 10, with_ties = F) %>% 
  pull(country_code)
  
  #x_axis_labels <- str_replace_all(
  #  unique(monthly_data$date),
  #  pattern = " ", replacement = "\n")

top_names <- 
countrycode::codelist %>% 
  select(country_code = iso2c, country.name.en, iso3 = iso3c) %>% 
  filter(country_code %in% top_countries) %>% 
  mutate(name = str_replace_all(country.name.en,
                                pattern =  " ",
                                replacement = "_")
         )
top_names$flag <- map_chr(top_names$name, emo::ji)
# Flags are having some issues with the font package

filter(monthly_data, country_code %in% top_countries) %>%
  left_join(top_names) %>%
  mutate(country_code = fct_reorder(country_code,
                                    log10(visitors + 1)),
         flag = fct_reorder(flag,
                            log10(visitors + 1))) %>%
  ggplot(aes(str_wrap(date, 5),
             country_code,
             fill = log10(visitors + 1))) +
  geom_tile(color = "white", lwd = 0.5) +
  #theme_clean +
  labs(
    title = "Top countries by visitors",
    subtitle = "Each country is on the top ten for at least a month",
    y = "Country Code",
    x = ""
  ) +
  theme(
    panel.background = element_blank(),
    legend.position = "bottom",
    legend.direction = 'horizontal',
    legend.title = element_text(vjust = 0.5),
    #text = element_text(size=46),
    #title = element_text(size=46),
    #plot.title = element_text(size=60),
    #plot.subtitle = element_text(size=46)
  ) +
#guides(fill = guide_legend(title.position = 'top')) +
# + scale_x_discrete(labels=x_axis_labels)
scale_fill_viridis_c() -> top_country_month
  # top_country_month
  ggsave(plot = top_country_month, "temp.png", dpi = 300)
  source("add_logo.R")    
  final_plot <- add_logo(plot_path = "temp.png", 
                logo_path = "openneuro.jpeg", 
                logo_position = "bottom left")
  magick::image_write(final_plot, "temp.png")
  knitr::include_graphics("temp.png")
```

#### Maps

```{r, warning=F, message=F}
library(sf)
library(rnaturalearth)
# Get world sf data
world <- ne_countries(scale = 'small', returnclass = 'sf')

world_robinson <- st_transform(world, crs = '+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs')

# exclude antartica
world_robinson <- world_robinson %>% 
  filter(!str_detect(name, "Antarctica"))

# wordpress data
# li <- list.files(path= "website/stats_wordpress_website_2013-2016/",
#                 pattern = "countries", full.names = T)

#wordpress <- lapply(li, function(tt) read_csv(tt, col_names = FALSE)) %>%
#  bind_rows()
#names(wordpress) <- c("Country", "views")

# Make the summary data from plausible
#total_visitors <-
#website %>% 
#  group_by(code) %>% 
#  summarise(Visitors = sum(Visitors)) %>% 
#  rename(iso_a3 = code)

total_visitors <- website %>% 
  group_by(country_code) %>% 
  summarise(visitors = sum(visitors)) %>% 
  rename(iso_a2 = country_code)

period <- paste(format(range(website$date), "%B-%Y"), collapse = " to ")
period <- paste("Data ranging from", period)

# Make the map
ggplot() +
  geom_sf(data = world_robinson) +
  geom_sf(data = left_join(world_robinson,
                           total_visitors,
                           by = "iso_a2"),
          aes(fill=log10(visitors + 1)),
          color="black",
          size=0.5, na.rm = TRUE)+
  labs(title = "Website visits",
       subtitle = period) +
  scale_fill_gradient(low="white", high="#F7490C",
                      na.value = "white") +
  theme_nothing -> orange_map

  ggsave(plot = orange_map, "orange_temp.png", dpi = 300)
  final_plot <- add_logo(plot_path = "orange_temp.png", 
                logo_path = "openneuro.jpeg", 
                logo_position = "bottom left")
  
  final_plot
```


```{r}
# add regions by code
website <-  website %>% 
  left_join(
  countrycode::codelist %>% 
    select(country_code = iso2c, 
           region = region),
  by = "country_code") %>% 
  # only keep complete cases
  filter(complete.cases(region))

region_barplot <- 
  website %>% 
  group_by(region) %>% 
  summarise(visitors = sum(visitors)) %>% 
  mutate(region = stringr::str_wrap(region, width=10),
         region = fct_reorder(region, visitors)) %>% 
  ggplot(aes(region,
             visitors)) +
  geom_col(color="black") +
  scale_y_continuous(labels = scales::label_number_si()) +
  theme(panel.grid.major.x = element_blank(), 
        panel.grid.minor.x = element_blank()) +
  labs(title = "Total openneuroscience visitors",
       subtitle = period,
       x="")


# if we wanted to add logo
#img <- magick::image_read("https://raw.githubusercontent.com/open-neuroscience/resources/master/logo/openneuroscience_blue_1600by400_border.png")  
# small logo
img <- magick::image_read("openneuro.jpeg")
g_pic <- grid::rasterGrob(img, interpolate=TRUE)

# logo inside
region_barplot +
  annotation_custom(g_pic, xmin=0.5, xmax =2, ymin = 2000)

```


```{r, eval=F}
# Same plot but with the logo outside the barplot.
region_barplot +
  annotation_custom(g_pic, 
                    xmin = 6.5, ymin = -3000, ymax=-1500) +
  coord_cartesian(clip = "off") +
  theme(plot.margin = unit(c(1, 1, 2, 1), "lines"))
```



```{r}
country_totals <-
  website %>%
  group_by(region, iso_a2 = country_code) %>% 
  summarise(Visitors = sum(visitors)) %>% 
  mutate(region = stringr::str_wrap(region, width=10),
         region = fct_reorder(region, Visitors)) 


# some countries don't have geometries so we can't plot them
data_for_map <-
country_totals %>% 
  dplyr::left_join(world_robinson, by = "iso_a2") %>% 
  filter(complete.cases(scalerank))

```

```{r}
ggplot() +
  geom_sf(data = world_robinson) +
  geom_sf(data = st_as_sf(data_for_map),
          aes(geometry=geometry,
            fill = region,
            alpha = log10(Visitors + 1)),
          color="black",
          size=0.5, na.rm = TRUE)+
  labs(title = "Website visits",
       subtitle = period,
       fill="") +
  scale_alpha_continuous() +
  theme_nothing +
  # do away with alpha legend and only keep fill
  guides(fill = guide_legend(
    override.aes = list(alpha = 0.5)),
         alpha = FALSE)

```


```{r outlier-events, eval=F}
# These are the days with most visits to the site
website %>% 
  group_by(country_code) %>%
  mutate(v = scale(visitors)) %>% 
  filter(v > 2, visitors > 10) %>% 
  select(date, country_code, visitors) %>% 
  arrange(desc(visitors))
```


### Twitter Analytics

```{r}
twitter_df <- lapply(list.files(path = "twitter/",
                        pattern = ".csv",
                        full.names = T), read_csv) %>%
  bind_rows()

# not sure why but there is a "summary" that gets appended
# if there is no tweet id we don't want to see, we can summarise later
twitter_df <-
twitter_df %>% 
  filter(!is.na(`Tweet id`)) %>% 
  # parse the date
  mutate(datetime = lubridate::parse_date_time(
    str_remove(time, pattern = " \\+0000"), 
    orders = "%Y-%m-%d %H:%M", tz = "UTC")
    )

# date ranges
date_range <- str_extract(range(twitter_df$time),
            pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}")

# we switch dates from "yyyy-mm-dd" to "Month Year"
text_date <- format(lubridate::parse_date_time(date_range,
                                               orders = c("Y-m-d")),
       "%B %Y")

subtitle_period <- paste("Period:", text_date[1], "—", text_date[2])

caption_twitter <- "@openneurosci analytics"
### colors
twitter_blue <- "#1DA1F2"
twitter_black <- "#14171A"
twitter_gray <- "#657786"
```


```{r impressions-per-tweet}
ggplot(twitter_df,
       aes(impressions))+
  geom_histogram(color=twitter_black, fill=twitter_blue) +
  scale_x_continuous(breaks = seq(0,11000, 2000),
                     labels = scales::label_number_si())+
  ggthemes::theme_clean(base_size = 16)+
  labs(title = "Views per tweet",
       subtitle = subtitle_period,
       caption = glue::glue(caption_twitter),
       y="Tweets", x=""
  )

#ggsave("views_per_tweet.png", width=6, height=4, units = "in")
```  

```{r engagement-rate, eval=F}
twitter_df %>% 
  mutate(month = lubridate::month(datetime)) %>% 
  ggplot(aes(month,
             `engagement rate`))+
  ggbeeswarm::geom_quasirandom(pch=21, 
                               color=twitter_black, 
                               fill=twitter_blue, 
                               alpha=0.75) +
  scale_y_continuous(labels = scales::label_percent())+
  scale_x_continuous(breaks = 1:12, labels=month.abb) +
  ggthemes::theme_clean()+
  labs(title="Engagement Rate", subtitle = subtitle_period)
```

```{r total-views}  
ggplot(twitter_df, aes(1:nrow(twitter_df),
               cumsum(impressions)))+
  geom_area(color=twitter_black, lwd=1,
            fill=twitter_blue)+
  #ggthemes::theme_clean() +
  theme_clean +
  theme(plot.background = element_rect(color=NA))+
  scale_y_continuous(labels=scales::label_number_si())+
  labs(title="Cumulative tweet views",
       subtitle = subtitle_period,
       caption = caption_twitter,
       x= "Tweets", y="")
```
```{r, total-views-date, include=F}
twitter_df %>% 
  arrange(datetime) %>% 
  mutate(cum_impressions = cumsum(impressions)) %>% 
ggplot(aes(datetime,
           cum_impressions))+
  geom_smooth(color=twitter_blue, fill=alpha(twitter_blue, 0.5))+
  #geom_path() +
  geom_point() +
  #ggthemes::theme_clean() +
  theme_clean +
  theme(plot.background = element_rect(color=NA))+
  scale_y_continuous(labels=scales::label_number_si())+
  labs(title="Cumulative tweet views",
       subtitle = subtitle_period,
       caption = caption_twitter,
       x= "Tweets", y="")
```


```{r twitter_days, include=F}
twitter_df <- 
twitter_df %>% 
  mutate(wday = lubridate::wday(time, 
                                label = T, week_start = 1))

top_engagement <- filter(twitter_df, `engagement rate` > 0.06) %>%
  pull(`Tweet id`) %>% 
  as.character()

twitter_df %>% 
  ggplot(aes(wday, `engagement rate`)) +
  ggbeeswarm::geom_quasirandom(color = twitter_black,
                               fill = twitter_blue,
                               pch = 21,
                               size = 2, alpha=0.8) +
  labs(title = "Engagement rate with @openneurosci tweets",
       subtitle = subtitle_period,
       y = "",
       x = "")+
  theme_clean +
  scale_y_continuous(labels=scales::label_percent())
  #ggrepel::geom_text_repel(data = filter(twitter_df,
  #                                       `engagement rate` > 0.06),
  #          aes(wday, `engagement rate`, label = as.character(`Tweet id`)))

```


```{r, eval=FALSE}
# this will only work with hugo shortcodes
map(
  top_engagement,
  function(tweet)
  blogdown::shortcode("tweet", tweet)
)
```

### YouTube Analytics

TBA